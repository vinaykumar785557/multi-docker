If you wish, 
you can still follow the course videos as shown and 
select Multi-container Docker running on 
64bit Amazon Linux when creating your environment. 
This will continue to work until July 2022.

However, if you want to use the new Amazon Linux 2 platform, 
please see the instructions below.

Amazon Linux 2 Multi Container Docker Deployment
The new EBS platform will no longer use a Dockerrun.aws.json 
file for deployment and will instead look 
for a docker-compose.yml file in the project root.

1. Create environment using the new platform

When creating our Elastic Beanstalk environment 
we need to select Docker running on 64bit Amazon Linux 2

2. Rename the current docker-compose file

Rename the docker-compose.yml file to docker-compose-dev.yml. 
Going forward you will need to pass a flag 
to specify which compose file you want to build and run from:
docker-compose -f docker-compose-dev.yml up
docker-compose -f docker-compose-dev.yml up --build
docker-compose -f docker-compose-dev.yml down

3. Create a production only docker-compose.yml file

The production compose file will follow closely 
what was written in the Dockerrun.aws.json. 
There are two major differences:

No Container Links: 
In the "Forming Container Links" lecture 
we add the client and server services to the 
links array of the nginx service.
Docker Compose will handle this container communication 
automatically for us.

Environment Variables: 
When using a compose file we will 
need to explicitly specify the environment variables 
each service will need access to. 
The value for each variable must match the corresponding variable names you have specified in the Elastic Beanstalk environment. The AWS variables are created in the "Setting Environment Variables" lecture.

Note - You must not have a Dockerrun.aws.json file in 
your project directory. 
If AWS EBS sees this file the deployment will fail. 
If you have previously followed this course and 
deployed to the old Multi-container platform 
you will need to delete this file before moving to the new platform!!!

Complete docker-compose.yml file:

version: "3"
services:
  client:
    image: "cygnetops/multi-client-10-14"
    mem_limit: 128m
    hostname: client
  server:
    image: "cygnetops/multi-server-10-14"
    mem_limit: 128m
    hostname: api
    environment:
      - REDIS_HOST=$REDIS_HOST
      - REDIS_PORT=$REDIS_PORT
      - PGUSER=$PGUSER
      - PGHOST=$PGHOST
      - PGDATABASE=$PGDATABASE
      - PGPASSWORD=$PGPASSWORD
      - PGPORT=$PGPORT
  worker:
    image: "cygnetops/multi-worker-10-14"
    mem_limit: 128m
    hostname: worker
    environment:
      - REDIS_HOST=$REDIS_HOST
      - REDIS_PORT=$REDIS_PORT
  nginx:
    image: "cygnetops/multi-nginx-10-14"
    mem_limit: 128m
    hostname: nginx
    ports:
      - "80:80"